#!/usr/bin/env ruby
#:mode=ruby:

# This program is released under the GNU General Public Licence. Please see
# http://opensource.org/licenses/gpl-license.php for more information.
# Author: Doga Armangil, armangild@yahoo.com

PODCATCHER_WEBSITE = 'http://podcatcher.rubyforge.org/'
PODCATCHER_VERSION = '3.1.6alpha'

# todo: --proxy option
# todo: download at most one enclosure or media:content per rss item
# todo: support for --content and --language options in search mode
# todo: code refactoring: do not duplicate option handling for 'options' option, factor out conversion between MIME type and file extension, avoid code duplication between implementations of download and search functions
# todo: "item search" - search function that generates a feed containing relevant items of feeds (":item" or ":show" ?)
# todo: option to specify share ratio for torrents
# todo: symlink support in directory (for history, cache etc)
# todo: improve playlist generation when using --strategy cache (only include audio and video content)
# todo: improve --feeds implementation
# todo: resuming of failed media downloads
# todo: --subscriptions option (subscription d/l limit)
# todo: informative exception messages
# todo: only fetch bittorrent metainfo for d/l candidates
# todo: option to download shows concurrently
# todo: "lock" directory to prevent concurrency issues
# todo: option to throttle non-BitTorrent downloads
# 3.1.6alpha: fixes a bug whereby a failed content download caused all other content from the same feed to be ignored
# 3.1.5: updated --arguments file format (# now comments out line), updated sponsor message
# 3.1.4: added publication date to content titles in generated playlists, added better handling of invalid URLs in feeds and subscription lists (such URLs are now simply ignored instead of causing the whole document to be skipped)
# 3.1.3: --restrictednames option is now enabled by default, fixed directory name generation bug that allowed '!' character when --perfeed and --restrictednames options were used simultaneously, updated sponsor message
# 3.1.2: modified the help text that appears when --help option is used, updated sponsor message
# 3.1.1: fixed a bug in verbose mode that caused content to be listed twice if it is declared as both RSS enclosure and Media RSS content, changed the sponsor message
# 3.1.0: added support for yyyy and yyyy.mm formats for --horizon parameter
# 3.0.0: added the --cachedir option for explicitely specifying cache directory, added --language option for selecting feeds by language, added the --horizon option that prevents the downloading of content older than a given date, added --restrictednames option for using content subdirectory and file names that are acceptable for restrictive filesystems such as VFAT, http://search.yahoo.com/mrss is now accepted as namespace for RSS Media module, fixed a bug in update checking (flash now only appears if podcatcherstats version is newer than current one), fixed a bug that caused votes to be sent for feeds that have file URLs or filenames.
# 2.0.1: fixed Yahoo Media RSS module handling bug
# 2.0.0: fixed a bug that caused the generation of invalid playlists for feeds containing control characters (such as Ctrl-M) in their title or in the title of one of its entries, added --order option that determines feed order, changed default feed order from 'sequential' to 'random', all content is downloaded by default (not only MP3), changed default cache size to 512MB, added support for the Yahoo Media RSS module (http://search.yahoo.com/mrss), added strategies for downloading content in chronological order (chron_one, chron, chron_all), added -C option that specifies the types of content that are to be received (overrides the default types), added -o option for reading options from a file, added -A option for reading arguments from a file, changed the default download strategy to 'one', added -V alias for --version option, fixed a bug that caused the order of feeds to be ignored in OPML files, fixed a bug that caused downloads of some video files to fail in vodcatcher mode, added --checkforupdate option for informing the user when a new version is available, added --vote option for voting in favour of downloaded podcasts at podcatcherstats.com
# 1.3.7: added status code and content type check when downloading a media file using HTTP, removed some debugging comments
# 1.3.5: fixed a bug that caused wrong cache filenames to be generated when an HTTP redirection was received from a server, added Operating System and processor information to the User-Agent HTTP header sent to web servers
# 1.3.4: fixed the help message
# 1.3.3: added the -p option that assigns a separate cache subfolder to each feed
# 1.3.2: bug fix
# 1.3.1: added robust handling of subscription lists that directly link to media files (such links are now ignored), fixed an OPML generation bug for interrupted searches
# 1.3.0: added search function for online podcast directories such as the iPodder podcast directory, added xspf support
# 1.2.0: added support for decentralized subscription lists (i.e. subscription lists that point to other subscription lists), fixed a bug that sometimes caused an invalid Referer header to be sent in HTTP requests, added the -f option, added support for Atom feeds that do not list items in reverse chronological order, added support for RSS/Atom feeds as command line arguments, added support for Extended M3U and Extended PLS playlist formats, M3U playlists can now also be generated in vodcatcher mode, m3u is now the default type in vodcatcher mode, added "cache" strategy which deprecates -c option
# 1.1.1: added support for iTunes .pcast subscription files
# 1.1.0: names of media files downloaded via BitTorrent are now preserved, done some refactoring so that the script can function as a vodcatcher
# 1.0.4: added support for RSS feeds that do not list items in reverse chronological order
# 1.0.3: fixed an RSS parsing bug that caused enclosures of some feeds to be ignored
# 1.0.2: fixed some minor MP3 file naming bugs
# 1.0.1: names of downloaded MP3 files are now preserved
# 1.0.0: added ATOM support
# 0.4.0: added duplicate removal for MP3, RSS/Atom and OPML URLs and pathnames; added the -i option that attempts to increase the listen-time given to podcasts which frequently release short shows
# 0.3.2: fixed BitTorrent handling bug
# 0.3.1: added robust handling of network exceptions, removed support for Ctrl-C to terminate execution
# 0.3.0: added support for opml format used by podcastalley, added podcast title information in playlists, reduced RAM usage by not loading the history file in memory, history file and playlist are now updated after each download
# 0.2.1: added support for Ctrl-C to terminate execution; added robust handling of some bad command line arguments; (James Carter patch) fixed the "OPML truncation" issue where a bad RSS feed was considered the last of the list
# 0.2.0: added a new download strategy ("one"); added support for more than one OPML argument, fixed some issues
# 0.1.7: bug fix
# 0.1.6: added internal Bittorrent support, fixed flawed handling of some exceptions
# 0.1.5: changed -d option description, added external handling of Bittorrent files
# 0.1.4: bug-fix, robust handling of bad //enclosure/@length attributes, handling of relative enclosure URLs
# 0.1.3: podcast download strategies (and changed default), download retries
# 0.1.2: added TOX playlist support, added HTTP and FTP support for the OPML parameter, done some code clean-up
# 0.1.1: fixed RSS parsing issue
# 0.1.0: initial version



require 'podcatcher'
include REXML

#PODCATCHER_ENV = :development
PODCATCHER_ENV = :production

USER_AGENT = "podcatcher/#{PODCATCHER_VERSION} Ruby/#{RUBY_VERSION} #{RUBY_PLATFORM}"
UPDATE_CHECK_INTERVAL = 6 #months

opt = OpenStruct.new
opt.PLAYLIST_TYPES = [:m3u, :smil, :pls, :asx, :tox, :xspf]
opt.playlist_type = opt.PLAYLIST_TYPES[0]
opt.size = 512
opt.content_type = Regexp.new ''
opt.DESCRIPTION = <<END

Armangil's podcatcher is a podcast client for the command line.
It can download any type of content enclosed in RSS or Atom files, such as
MP3 or other audio content, video and images. A search function for
subscribing to feeds is also included. It provides several download
strategies, supports BitTorrent, offers cache management, and generates
playlists for media player applications.

As argument, it accepts feeds (RSS or Atom) or subscription lists
(OPML or iTunes PCAST), in the form of filenames or URLs (HTTP or FTP).
Alternatively, it accepts one feed or subscription list from the standard
input.

BitTorrent is supported both internally (through the RubyTorrent library)
and externally (.torrent files are downloaded, but the user handles
them using a BitTorrent application). The latter is currently the most
reliable method, as RubyTorrent is still in alpha phase.

Concurrency is not handled: simultaneous executions of this program should
target different directories.

Visit http://podcatcher.rubyforge.org/ for more information.

Usage: #{$0} [options] [arguments]
END

opt.dir = Pathname.new Dir.pwd
opt.CACHEDIR= 'cache'
opt.cachedir = opt.dir + opt.CACHEDIR
opt.memsize = 1_000
opt.empty = false
opt.simulate = false
opt.verbose = false
opt.STRATEGIES = [:one, :new, :back_catalog, :all, :chron, :chron_one, :chron_all, :cache]
opt.strategy = opt.STRATEGIES[0]
opt.retries = 1
opt.torrent_dir = nil
opt.rubytorrent = false
opt.upload_rate = nil #10
opt.itemsize = 0
opt.feeds = 1_000
opt.FUNCTIONS = [:download, :search]
opt.function = opt.FUNCTIONS[0]
opt.per_feed = false
opt.vote = true
opt.check_for_update = true
opt.ORDERS = [:random, :sequential, :alphabetical, :reverse]
opt.order = opt.ORDERS[0]
opt.horizon=nil
opt.language=[]
opt.restricted_names = true

arguments = []

option_parser = OptionParser.new() do |c|
  c.banner = opt.DESCRIPTION
  c.separator ""
  c.separator "Options:"
  c.on("-d", "--dir DIR",
    "Directory for storing application state.",
    "Default value is current directory.\n") do |e|
    contained=false
    #cache directory inside old state directory?
    statedir=opt.dir
    cachedir=opt.cachedir
    loop do
      if cachedir==statedir
        contained=true
        break
      end
      break if cachedir.root?
      cachedir=cachedir.parent
    end
    opt.dir = Pathname.new(Dir.pwd)+e
    #cache directory inside new state directory?
    unless contained
      statedir=opt.dir
      cachedir=opt.cachedir
      loop do
        if cachedir==statedir
          contained=true
          break
        end
        break if cachedir.root?
        cachedir=cachedir.parent
      end
    end
    #new state directory inside cache directory?
    unless contained
      statedir=opt.dir
      cachedir=opt.cachedir
      loop do
        if cachedir==statedir
          contained=true
          break
        end
        break if statedir.root?
        statedir=statedir.parent
      end
    end
    #
    opt.dir.mkdir unless opt.dir.exist?
    exit 1 unless opt.dir.directory?
    if contained
      opt.cachedir = opt.dir + opt.CACHEDIR
    end
  end
  c.on("-D", "--cachedir DIR",
    "Directory for storing downloaded content.",
    "Default value is the '#{opt.CACHEDIR}' subdirectory",
    "of the state directory (specified by ",
    "the --dir option).",
    "This option is ignored if this directory",
    "is inside the state directory, or if the",
    "state directory is inside this directory.\n") do |e|
    contained=false
    #cache directory should be outside state directory
    statedir=opt.dir
    cachedir = Pathname.new(Dir.pwd)+e
    loop do
      if cachedir==statedir
        contained=true
        break
      end
      break if cachedir.root?
      cachedir=cachedir.parent
    end
    next if contained
    #state directory should be outside cache directory
    statedir=opt.dir
    cachedir = Pathname.new(Dir.pwd)+e
    loop do
      if cachedir==statedir
        contained=true
        break
      end
      break if statedir.root?
      statedir=statedir.parent
    end
    next if contained
    #accept cache directory
    opt.cachedir=Pathname.new(Dir.pwd)+e
  end
  c.on("-s", "--size SIZE",
    "Size, in megabytes, of the cache directory",
    "(specified by the --cachedir option).",
    "0 means unbounded. Default value is #{opt.size}.",
    "This option also sets the upper limit for",
    "the amount of content that can be downloaded",
    "in one session.",
    "Content downloaded during previous sessions",
    "may be deleted by podcatcher in order to",
    "make place for new content.\n") do |e|
    opt.size = e.to_i
    opt.size = nil if opt.size<1
  end
  c.on("-e", "--[no-]empty",
    "Empty the cache directory before",
    "downloading content.\n") do |e|
    opt.empty = e
  end
  c.on("-p", "--[no-]perfeed",
    "Create one subdirectory per feed",
    "in the cache directory.\n") do |e|
    opt.per_feed = e
  end
  c.on("-S", "--strategy S", opt.STRATEGIES,
    "Strategy to use when downloading content:",
    "* back_catalog: download any content that",
    " has not been downloaded before; prefer",
    " recent content to older content (may ",
    " download more than one content file per",
    " feed),",
    "* one: download one content file (not ",
    " already downloaded) for each feed, with a ",
    " preference for recent content,",
    "* all: download all content, with a ",
    " preference for recent content; even ",
    " already downloaded content is downloaded ",
    " once again (may download more than one",
    " content file per feed),",
    "* chron: download in chronological order",
    " any content that has not been downloaded ",
    " before; this is useful for audiobook",
    " podcasts etc (may download more than one",
    " content file per feed),",
    "* chron_one: download the oldest content of",
    " each feed that has not already been ",
    " downloaded, ",
    "* chron_all: download all content in ",
    " chronological order, even if the content",
    " has already been downloaded (may download",
    " more than one content file per feed), ",
    "* new: download the most recent content ",
    " of each feed, if it has not already been ",
    " downloaded (DEPRECATED: use 'one' instead",
    " of 'new'),",
    "* cache: generate a playlist for content ",
    " already in cache.",
    "Default value is #{opt.strategy}.\n") do |e|
    opt.strategy = e if e
  end
  c.on("-C", "--content REGEXP",
    "A regular expression that matches the",
    "MIME types of content to be downloaded.",
    "Examples: '^video/', '^audio/mpeg$'.",
    "Default value is '', which matches any",
    "type of content.\n") do |e|
    begin
      opt.content_type = Regexp.new(e.downcase) if e
    rescue Exception
      $stderr.puts "Error: ignoring regular expression '#{e}'"
    end
  end
  c.on("-l", "--language LANG",
    "A list of language tags separated by",
    "commas. Examples: 'en-us,de', 'fr'.",
    "A feed whose language does not match",
    "this list is ignored. By default, all",
    "feeds are accepted. See",
    "http://cyber.law.harvard.edu/rss/languages.html",
    "and",
    "http://cyber.law.harvard.edu/rss/rss.html#optionalChannelElements",
    "for allowed tags.\n") do |e|
    opt.language = e.split ','
    for i in 0...opt.language.size
      opt.language[i].downcase!
      opt.language[i] = opt.language[i].split '-'
    end
  end
  c.on("-H", "--horizon DATE",
    "Do not download content older than",
    "the given date. The date has the format",
    "yyyy.mm.dd (example: 2007.03.22) or",
    "yyyy.mm (equivalent to yyyy.mm.01) or",
    "yyyy (equivalent to yyyy.01.01).",
    "#{opt.horizon ? 'Default value is '+opt.horizon.to_s.split('-').join('.') : 'By default, no horizon is specified'}.\n") do |e|
    begin
      date = e.split '.'
      if (1..3).include? date.size
        while date.size < 3
          date << '01'
        end
        opt.horizon = Date.parse date.join('-')
      end
    rescue ArgumentError
    end
  end
  c.on("-r", "--retries N",
    "Try downloading files (content, feeds",
    "or subscription lists) at most N times",
    "before giving up. Default value is #{opt.retries}.\n") do |e|
    opt.retries = e.to_i unless e.to_i<1
  end
  c.on("-t", "--type TYPE", opt.PLAYLIST_TYPES,
    "Type of the playlist written to",
    "standard output. Accepted values are",
    "#{opt.PLAYLIST_TYPES.join ', '}.",
    "Default value is #{opt.playlist_type}.\n") do |e|
    opt.playlist_type = e if e
  end
  c.on("-m", "--memsize N",
    "Remember last N downloaded content,",
    "and do not download them again. ",
    "0 means unbounded. Default value is #{opt.memsize}.\n") do |e|
    opt.memsize = e.to_i
    opt.memsize = nil if opt.memsize<1
  end
  c.on("-o", "--order ORDER", opt.ORDERS,
    "The order in which feeds are traversed",
    "when downloading content:",
    "* random: randomizes the feed order,",
    " so that every feed has an equal chance",
    " when content is downloaded, even if",
    " the cache size is small and the number",
    " of feeds is big,",
    "* alphabetical: orders feeds",
    " alphabetically by using their titles,",
    "* sequential: preserves the argument ",
    " order (and the feed order in",
    " subscription lists),",
    "* reverse: reverses the feed order.",
    "Default value is #{opt.order}.\n") do |e|
    opt.order = e if e
  end
  c.on("-F", "--function FUNCTION", opt.FUNCTIONS,
    "Used function:",
    "* download: downloads content from",
    " specified feeds,",
    "* search: generates an OPML subscription",
    " list of feeds matching the specified",
    " query; the only options relevant for ",
    " search are -v, -r and -f.",
    "Default value is #{opt.function}.\n") do |e|
    opt.function = e if e
  end
  c.on("-f", "--feeds N",
    "Do not download more than N feeds",
    "(when using the download function),",
    "or return the first N relevant feeds",
    "(when using the search function).",
    "0 means unbounded. Default value is #{opt.feeds}.\n") do |e|
    opt.feeds = e.to_i
    opt.feeds = nil if opt.feeds<1
  end
  c.on("-T", "--torrentdir DIR",
    "Copy torrent files to directory DIR.",
    "The handling of torrents through an",
    "external BitTorrent client is left to",
    "the user. If this option is not used,",
    "torrents are handled internally (if",
    "RubyTorrent is installed), or else",
    "ignored.\n") do |e|
    dir = Pathname.new e
    if dir.exist? and dir.directory?
      opt.torrent_dir = dir
    end
  end
  c.on("-U", "--uploadrate N",
    "Maximum upload rate (kilobytes per second)",
    "for the internal BitTorrent client.",
    "#{opt.upload_rate ? 'Default value is '+opt.upload_rate : 'Unbounded by default'}.\n") do |e|
    opt.upload_rate = e.to_i unless e.to_i<1
  end
  c.on("-i", "--itemsize N",
    "If downloaded content is less than N MB in",
    "size (where N is an integer), fetch other",
    "content of that same feed until this size",
    "is reached. ",
    "Default value is #{opt.itemsize}.",
    "The intent here is to ensure that podcatcher",
    "downloads about as much content from podcasts",
    "that frequently post small content (in",
    "terms of minutes) as it does from podcasts",
    "that post bigger content less frequently.",
    "This option was more relevant in the early",
    "days of podcasting when content size varied",
    "greatly from one podcast to another. You",
    "would rarely need to use this option today.\n") do |e|
    opt.itemsize = e.to_i unless e.to_i<0
  end
  c.on("-c", "--[no-]cache",
    "Generate a playlist for content",
    "already in cache.",
    "DEPRECATED, use '--strategy cache'.\n") do |e|
    opt.strategy = :cache if e
  end
  c.on("-a", "--[no-]asif",
    "Do not download content, only download",
    "feeds and subscription lists.",
    "Useful for testing.\n") do |e|
    opt.simulate = e
  end
  c.on("-v", "--[no-]verbose", "Run verbosely.\n") do |e|
    opt.verbose = e
  end
  c.on("-V", "--version", "Display current version and exit.\n") do
    puts PODCATCHER_VERSION
    exit
  end
  c.on("-h", "--help", "Display this message and exit.\n") do
    puts c.to_s
    exit
  end
  c.on("--[no-]restrictednames",
    'In the cache directory, make the names of',
    'created subdirectories and files acceptable',
    'for restrictive file systems such as VFAT',
    'and FAT, which are used on Windows and MP3',
    'player devices.',
    "Enabled by default.\n") do |e|
    opt.restricted_names = e
  end
  c.on("--[no-]checkforupdate",
    "Check once every #{UPDATE_CHECK_INTERVAL} months if a newer ",
    "version is available and display an ",
    "informational message. Enabled by default.\n") do |e|
    opt.check_for_update = e
  end
  c.on("--[no-]vote",
    "Automatically vote for the downloaded",
    "podcasts at podcatcherstats.com.",
    "Enabled by default.\n") do |e|
    opt.vote = e
  end
  c.on("-A", "--arguments FILENAME_OR_URL",
    "Read arguments from specified file.",
    "Rules:",
    "* accepts one argument per line,",
    "* ignores empty lines and lines starting",
    "  with #,",
    "* this option may be used several times",
    "  in one command.\n") do |e|
    begin
      open(e) do |f|
        loop do
          line = f.gets
          break unless line
          line = line.chomp.strip
          next if line.length == 0
          next if line =~ /^\s*#/
          arguments << line
        end
      end
    rescue Exception
      $stderr.puts "Error: arguments file could not be read and will be ignored"
    end
  end
  c.on("-O", "--options FILENAME_OR_URL",
    "Read options from specified file.",
    "The options file uses the YAML format.\n") do |e|
    loop do
      options = nil
      begin
        open(e) do |f|
          options = YAML::load(f)
        end
      rescue Exception
        $stderr.puts "Error: options file could not be read and will be ignored"
      end
      break unless options
      break unless options.instance_of? Hash
      options.each() do |option, value|
        case option.downcase
        when 'arguments'
          begin
            open(value) do |f|
              loop do
                line = f.gets
                break unless line
                line = line.chomp.strip
                next if line.length == 0
                arguments << line
              end
            end
          rescue Exception
            $stderr.puts "Error: arguments file could not be read and will be ignored"
          end
        when 'dir'
          contained=false
          #cache directory inside old state directory?
          statedir=opt.dir
          cachedir=opt.cachedir
          loop do
            if cachedir==statedir
              contained=true
              break
            end
            break if cachedir.root?
            cachedir=cachedir.parent
          end
          opt.dir = Pathname.new(Dir.pwd)+value
          #cache directory inside new state directory?
          unless contained
            statedir=opt.dir
            cachedir=opt.cachedir
            loop do
              if cachedir==statedir
                contained=true
                break
              end
              break if cachedir.root?
              cachedir=cachedir.parent
            end
          end
          #new state directory inside cache directory?
          unless contained
            statedir=opt.dir
            cachedir=opt.cachedir
            loop do
              if cachedir==statedir
                contained=true
                break
              end
              break if statedir.root?
              statedir=statedir.parent
            end
          end
          #
          opt.dir.mkdir unless opt.dir.exist?
          exit 1 unless opt.dir.directory?
          if contained
            opt.cachedir = opt.dir + opt.CACHEDIR
          end
        when 'cachedir'
          contained=false
          #cache directory should be outside state directory
          statedir=opt.dir
          cachedir = Pathname.new(Dir.pwd)+value
          loop do
            if cachedir==statedir
              contained=true
              break
            end
            break if cachedir.root?
            cachedir=cachedir.parent
          end
          next if contained
          #state directory should be outside cache directory
          statedir=opt.dir
          cachedir = Pathname.new(Dir.pwd)+value
          loop do
            if cachedir==statedir
              contained=true
              break
            end
            break if statedir.root?
            statedir=statedir.parent
          end
          next if contained
          #accept cache directory
          opt.cachedir=Pathname.new(Dir.pwd)+value
        when 'size'
          if value.instance_of?(Fixnum)
            opt.size = value
            opt.size = nil if opt.size<1
          end
        when 'strategy'
          opt.strategy = value.to_sym if opt.STRATEGIES.detect{|s| value.to_sym == s}
        when 'type'
          opt.playlist_type = value.to_sym if opt.PLAYLIST_TYPES.detect{|s| value.to_sym == s}
        when 'retries'
          opt.retries = value if value.instance_of?(Fixnum) and value>=1
        when 'memsize'
          if value.instance_of?(Fixnum)
            opt.memsize = value
            opt.memsize = nil if opt.memsize<1
          end
        when 'content'
          begin
            opt.content_type = Regexp.new(value.downcase)
          rescue Exception
            $stderr.puts "Error: '#{value.downcase}' is not a valid regular expression and will be ignored"
          end
        when 'language'
          opt.language = value.split ','
          for i in 0...opt.language.size
            opt.language[i].downcase!
            opt.language[i] = opt.language[i].split '-'
          end
        when 'order'
          opt.order = value.to_sym if opt.ORDERS.detect{|s| value.to_sym == s}
        when 'function'
          opt.function = value.to_sym if opt.FUNCTIONS.detect{|s| value.to_sym == s}
        when 'feeds'
          if value.instance_of?(Fixnum)
            opt.feeds = value
            opt.feeds = nil if opt.feeds<1
          end
        when 'horizon'
          begin
            date = value.split '.'
            if (1..3).include? date.size
              while date.size < 3
                date << '01'
              end
              opt.horizon = Date.parse date.join('-')
            end
          rescue ArgumentError
          end
        when 'torrentdir'
          dir = Pathname.new value
          if dir.exist? and dir.directory?
            opt.torrent_dir = dir
          end
        when 'uploadrate'
          opt.upload_rate = value if value.instance_of?(Fixnum) and value>=1
        when 'itemsize'
          opt.itemsize = value if value.instance_of?(Fixnum) and value>=0
        when 'perfeed'
          opt.per_feed = value if value.instance_of?(FalseClass) or value.instance_of?(TrueClass)
        when 'cache'
          opt.strategy = :cache if value.instance_of?(TrueClass)
        when 'empty'
          opt.empty = value if value.instance_of?(FalseClass) or value.instance_of?(TrueClass)
        when 'asif'
          opt.simulate = value if value.instance_of?(FalseClass) or value.instance_of?(TrueClass)
        when 'checkforupdate'
          opt.check_for_update = value if value.instance_of?(FalseClass) or value.instance_of?(TrueClass)
        when 'vote'
          opt.vote = value if value.instance_of?(FalseClass) or value.instance_of?(TrueClass)
        when 'verbose'
          opt.verbose = value if value.instance_of?(FalseClass) or value.instance_of?(TrueClass)
        when 'restrictednames'
          opt.restricted_names = value if value.instance_of?(FalseClass) or value.instance_of?(TrueClass)
        end
      end
      break
    end
  end
  c.separator ""
  c.separator "Usage examples:"
  c.separator "    #{$0} --dir ~/podcasts http://podcastalley.com/PodcastAlleyTop50.opml > latest.m3u"
  c.separator ""
  c.separator "    #{$0} --dir ~/podcasts rss.xml atom.xml *.pcast feeds.opml http://host/second.opml > latest.m3u"
  c.separator ""
  c.separator "    #{$0} --dir ~/podcasts --strategy cache > cache.m3u"
  c.separator ""
  c.separator "    cat feeds.opml | #{$0} --dir ~/podcasts > latest.m3u"
  c.separator ""
  c.separator "    #{$0} -vd ~/podcasts -s 500 -m 10_000 -t tox feeds.opml > latest.tox"
  c.separator ""
  c.separator "    #{$0} -vF search 'book health daily source code' 'http://www.ipodder.org/discuss/reader$4.opml' > results.opml"
  c.separator ""
  c.separator "    #{$0} -F search -f 12 mac http://www.podfeed.net/opml/directory.opml > results.opml"
end
option_parser.parse!

opt.size *= 1_000_000 if opt.size
opt.upload_rate *= 1024 if opt.upload_rate
opt.itemsize *= 1_000_000
arguments = arguments + ARGV

unless opt.check_for_update
  $stderr.puts "Disabling update check." if opt.verbose
end

unless opt.vote
  $stderr.puts "Disabling the sending of anonymous usage statistics." if opt.verbose
end

begin
  require "rubytorrent"
  opt.rubytorrent = true
  $stderr.puts "RubyTorrent detected." if opt.verbose
rescue Interrupt, SystemExit
  exit 1
rescue Exception
end

if opt.function == :download
  cache = Cache.new opt
  cache.createplaylist arguments
elsif opt.function == :search
  dir = Query.new opt, arguments.shift
  dir.search arguments
end

if opt.check_for_update
  update = Update.new opt.dir
  update.check
end

$stderr.puts "End of podcatching session." if opt.verbose

